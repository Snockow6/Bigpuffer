---
- name: Create {{ item }} pod
  containers.podman.podman_pod:
    name: "{{ item }}"
    state: started
    ports:
      - "8989:8989"
      - "9091:9091"
      - "9117:9117"
  register: state

- name: Create {{ item }}_app Podman Container
  containers.podman.podman_container:
    name: "{{ item }}_app"
    pod: "{{ item }}"
    image: ghcr.io/linuxserver/sonarr:latest
    state: present
    # security_opt:
    #   label=type:Nextcloud_app.process
    # generate_systemd:
    #   new: false
    #   names: true
    #   path: /etc/systemd/system/
    #   restart_policy: "on-failure"
    # ports:
    #   - "8443:443"
    env:
      PUID="{{ UserID }}"
      PGID="{{ GroupID }}"
      TZ="{{ TimeZone }}"
    volume:
      - "{{ ContainerData }}/{{ item }}/Config:/config:rw"
      - "{{ ContainerData }}/Transmission/Downloads:/downloads:rw"
      - "{{ Anime }}:/Anime:rw" 
      - "{{ TV }}:/TV:rw" 

# - name: Make "{{ item }}" Systemd service
#   copy:
#     dest: "/etc/systemd/system/container-{{ item }}.service"
#     content: |
#       [Unit]
#       Description={{ item }} container
#       After=multi-user.target
#       Wants=multi-user.target, network-online.target
#       RequiresMountsFor={{ ContainerData }}/{{ item }}, {{ Anime }}, /run/containers/storage


#       [Service]
#       TimeoutStartSec=0
#       ExecStartPre=-/usr/bin/podman kill {{ item }}
#       ExecStartPre=-/usr/bin/podman rm {{ item }}
#       ExecStartPre=-/usr/bin/podman pull ghcr.io/linuxserver/sonarr:latest
#       ExecStart=/usr/bin/podman run \
#       --name {{ item }} \
#       -e PUID="{{ UserID }}" \
#       -e PGID="{{ GroupID }}" \
#       -e TZ="{{ TimeZone }}" \
#       -v "{{ ContainerData }}/{{ item }}/Config:/config:rw" \
#       -v "/{{ ContainerData }}/Transmission/Downloads:/downloads:rw" \
#       -v "{{ Anime }}:/Anime" \
#       -v "{{ TV }}:/TV" \
#       -p 8989:8989 \
#       --security-opt label=type:Sonarr.process \
#       ghcr.io/linuxserver/sonarr:latest

#       ExecStop=/usr/bin/podman stop {{ item }}

#       [Install]
#       WantedBy=multi-user.target
#   register: state

- name: Create {{ item }}_Jackett Podman Container
  containers.podman.podman_container:
    name: "{{ item }}_Jackett"
    pod: "{{ item }}"
    image: ghcr.io/linuxserver/jackett:latest
    env:
      PUID="{{ UserID }}"
      PGID="{{ GroupID }}"
      TZ="{{ TimeZone }}"
    volume:
      - "{{ ContainerData }}/Jackett/Config:/config:rw"
      - "{{ ContainerData }}/Jackett/Downloads:/downloads:rw"


- name: Create {{ item }}_Transmission Podman Container
  containers.podman.podman_container:
    name: "{{ item }}_Transmission"
    pod: "{{ item }}"
    image: ghcr.io/linuxserver/transmission:latest
    env:
      PUID="{{ UserID }}"
      PGID="{{ GroupID }}"
      TZ="{{ TimeZone }}"
    volume:
      - "{{ ContainerData }}/Transmission/Config:/config:rw"
      - "{{ ContainerData }}/Transmission/Downloads:/downloads:rw"
      - "{{ ContainerData }}/Transmission/Watch:/watch:rw" 

- name: Make {{ item }} Systemd service
  shell: cd /etc/systemd/system/ && podman generate systemd --files --name {{ item }}
  when: state.changed == true

- name: Pause for 10 seconds to start app
  pause:
    seconds: 10
  when: state.changed == true

- name: restart {{ item }} service if change
  ansible.builtin.systemd:
    state: restarted
    daemon_reload: yes
    enabled: yes
    name: "pod-{{ item }}"
  when: state.changed == true

- name: Start {{ item }} service
  ansible.builtin.systemd:
    state: started
    enabled: yes
    name: "pod-{{ item }}"
  when: state.changed == false
